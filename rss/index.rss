<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Ansel's Notes</title><description>Thoughts, stories and ideas.</description><link>http://ghost.ansellin.club/</link><generator>Ghost 0.11</generator><lastBuildDate>Mon, 31 Jul 2017 15:56:47 GMT</lastBuildDate><atom:link href="http://ghost.ansellin.club/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>How to Setup Nginx Reverse Proxy</title><description>&lt;p&gt;The Nginx Reverse Proxy service could be started easily by the &lt;a href="https://hub.docker.com/_/nginx/"&gt;Nginx image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With my configuration,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/weasellin/nginx_conf.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the &lt;code&gt;${HOST_IP}&lt;/code&gt; in the &lt;code&gt;service_*.conf&lt;/code&gt; with the host ip&lt;/p&gt;

&lt;p&gt;Since the Nginx would be run in the container, we have to explicitly&lt;/p&gt;</description><link>http://ghost.ansellin.club/how-to-setup-nginx-proxy/</link><guid isPermaLink="false">5db4d743-7eca-45cb-8acb-70f522d5fc87</guid><dc:creator>Ansel Lin</dc:creator><pubDate>Mon, 24 Jul 2017 22:07:32 GMT</pubDate><content:encoded>&lt;p&gt;The Nginx Reverse Proxy service could be started easily by the &lt;a href="https://hub.docker.com/_/nginx/"&gt;Nginx image&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With my configuration,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/weasellin/nginx_conf.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the &lt;code&gt;${HOST_IP}&lt;/code&gt; in the &lt;code&gt;service_*.conf&lt;/code&gt; with the host ip&lt;/p&gt;

&lt;p&gt;Since the Nginx would be run in the container, we have to explicitly assign host ip instead of using &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To run the service,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$docker run \
    --name ansel-nginx \
    -p 80:80 \
    -d \
    --restart always \
    -v ${NGINX_CONF_DIR}:/etc/nginx/conf.d \
    nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="dynamicreverseproxyadvanced"&gt;Dynamic Reverse Proxy (Advanced)&lt;/h3&gt;</content:encoded></item><item><title>How to Setup Jupyter PySpark Server</title><description>&lt;p&gt;From this &lt;a href="https://github.com/jupyter/docker-stacks/tree/master/pyspark-notebook"&gt;image&lt;/a&gt;, it's easy to start a Jupyter Notebook Server with PySpark.&lt;/p&gt;

&lt;p&gt;To preserve file and data, we have to prepare a host directory, ex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export JUPYTER_DATA_DIR=${HOME}/service/jupyter_data
$ mkdir -p ${JUPYTER_DATA_DIR}
$ chmod 777 ${JUPYTER_DATA_DIR}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, there is a workaround&lt;/p&gt;</description><link>http://ghost.ansellin.club/how-to-setup-jupyter-pyspark-server/</link><guid isPermaLink="false">350299f6-ad04-4a9f-bfee-2f348939d105</guid><dc:creator>Ansel Lin</dc:creator><pubDate>Sat, 22 Jul 2017 07:48:21 GMT</pubDate><content:encoded>&lt;p&gt;From this &lt;a href="https://github.com/jupyter/docker-stacks/tree/master/pyspark-notebook"&gt;image&lt;/a&gt;, it's easy to start a Jupyter Notebook Server with PySpark.&lt;/p&gt;

&lt;p&gt;To preserve file and data, we have to prepare a host directory, ex.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export JUPYTER_DATA_DIR=${HOME}/service/jupyter_data
$ mkdir -p ${JUPYTER_DATA_DIR}
$ chmod 777 ${JUPYTER_DATA_DIR}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that, there is a workaround to allow the privilege of notebook user in the container, by &lt;code&gt;chmod&lt;/code&gt; for the &lt;code&gt;${JUPYTER_DATA_DIR}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: study the docker option of &lt;code&gt;--userns-remap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By the following command, the &lt;a href="https://github.com/jupyterlab/jupyterlab"&gt;Jupyter Lab&lt;/a&gt; Notebook server would be up in &lt;code&gt;http://localhost:8888&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run \
    --name ansel-jupyterlab \
    -p 8888:8888 \
    -d \
    --restart always \
    -v ${JUPYTER_DATA_DIR}:/home/jovyan \
    jupyter/pyspark-notebook \
    start.sh \
    jupyter lab \
    --NotebookApp.token='******'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="multiplepysparkkernels"&gt;Multiple PySpark Kernels&lt;/h3&gt;

&lt;p&gt;For the requirement of running multiple version of pyspark kernels, I initiate a project in &lt;a href="https://github.com/weasellin/jupyter_pyspark"&gt;here&lt;/a&gt;, which is referring from &lt;a href="https://mengdong.github.io/2016/08/08/fully-armed-pyspark-with-ipython-and-jupyter/"&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To build the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/weasellin/jupyter_pyspark.git
$ cd jupyter_pyspark
$ docker build -t jupyter/pyspark_multi_kernels .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the image, similar as the previous one:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run \
    --name ansel-jupyterlab \
    -p 8888:8888 \
    -d \
    --restart always \
    -v ${JUPYTER_DATA_DIR}:/home/jovyan \
    jupyter/pyspark_multi_kernels \
    start.sh \
    jupyter lab \
    --NotebookApp.token='******'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the kernels would be shown in the options.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://ghost.ansellin.club/content/images/2017/07/Screenshot-from-2017-07-31-23-48-27.png" alt=""&gt;&lt;/p&gt;</content:encoded></item><item><title>How to Setup GitLab Runner on Local</title><description>&lt;blockquote&gt;
  &lt;p&gt;The purpose of this note is to setup a GitLab Runner on local to run GitLab CI jobs in the developing stage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="dockerizedgitlabrunner"&gt;Dockerized GitLab Runner&lt;/h3&gt;

&lt;p&gt;(recommended approach)&lt;/p&gt;

&lt;p&gt;First of all, by following &lt;a href="https://docs.gitlab.com/runner/"&gt;this document&lt;/a&gt;, &lt;br&gt;
I tried to run a dockerized gitlab-runner, &lt;br&gt;
and mounted local repository directory with &lt;br&gt;
&lt;code&gt;-v &amp;lt;local_&lt;/code&gt;&lt;/p&gt;</description><link>http://ghost.ansellin.club/how-to-setup-gitlab-runner/</link><guid isPermaLink="false">aa4e72f5-f717-49e9-9943-233260378f01</guid><dc:creator>Ansel Lin</dc:creator><pubDate>Wed, 05 Jul 2017 06:50:15 GMT</pubDate><content:encoded>&lt;blockquote&gt;
  &lt;p&gt;The purpose of this note is to setup a GitLab Runner on local to run GitLab CI jobs in the developing stage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="dockerizedgitlabrunner"&gt;Dockerized GitLab Runner&lt;/h3&gt;

&lt;p&gt;(recommended approach)&lt;/p&gt;

&lt;p&gt;First of all, by following &lt;a href="https://docs.gitlab.com/runner/"&gt;this document&lt;/a&gt;, &lt;br&gt;
I tried to run a dockerized gitlab-runner, &lt;br&gt;
and mounted local repository directory with &lt;br&gt;
&lt;code&gt;-v &amp;lt;local_repo_dir&amp;gt;:&amp;lt;local_repo_dir&amp;gt;&lt;/code&gt;
and specified the working directory &lt;br&gt;
&lt;code&gt;-w &amp;lt;local_repo_dir&amp;gt;&lt;/code&gt;
for the purpose of auto-load the CI config &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run \
    -d \
    --name gitlab-runner-container \
    --rm \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v &amp;lt;local_repo_dir&amp;gt;:&amp;lt;local_repo_dir&amp;gt; \
    -w &amp;lt;local_repo_dir&amp;gt; \
    gitlab/gitlab-runner:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Furthermore, if the base image of the CI job is from private docker registry, one solution is to mount the auth-token file generated by &lt;code&gt;docker login&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    -v ${HOME}/.docker/config.json:/root/.docker/config.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see &lt;code&gt;gitlab-runner&lt;/code&gt; usage&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it gitlab-runner-container gitlab-runner

NAME:
   gitlab-runner - a GitLab Runner

USAGE:
   gitlab-runner [global options] command [command options] [arguments...]

VERSION:
   9.3.0 (3df822b)

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run CI jobs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it gitlab-runner-container \
    gitlab-runner exec docker \
    --docker-privileged \
    [job_name]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;p&gt;[&lt;strong&gt;Updated&lt;/strong&gt; Jul. 10th 2017]
&lt;em&gt;By mounted repository directory explicitly, I resolved the issue mentioned below.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Updated&lt;/strong&gt; Jul. 26th 2017]
&lt;em&gt;The &lt;code&gt;--DOCKER_AUTH_CONFIG&lt;/code&gt; doesn't work, using &lt;code&gt;docker login&lt;/code&gt; in the job script instead.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;If you use the image from the private docker registry, you could add the &lt;code&gt;--DOCKER_AUTH_CONFIG&lt;/code&gt; with the &lt;code&gt;json&lt;/code&gt; string from the &lt;code&gt;.docker/config.json&lt;/code&gt;.&lt;/del&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it gitlab-runner-container \
    gitlab-runner exec docker \
    --docker-privileged \
    --env DOCKER_AUTH_CONFIG='$(cat ~/.docker/config.json | tr -d '\040\011\012\015')' \
    [job_name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;del&gt;I got an error&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Running on runner--project-0-concurrent-0 via &lt;br&gt;
    a853d0cb3c01...
    Cloning repository...
    fatal: repository '/usr/local/repo' does not exist
    ERROR: Job failed: exit code 1
    FATAL: exit code 1&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;With some solutions searching, I found &lt;a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/issues/2438"&gt;this issue&lt;/a&gt;. &lt;br&gt;
&lt;del&gt;After failure on the trial of the &lt;code&gt;--docker-privileged&lt;/code&gt; and &lt;code&gt;--docker-volumes&lt;/code&gt; parameters, I decided to leave it alone and try to really install GitLab Runner.&lt;/del&gt;&lt;/p&gt;

&lt;h3 id="originalgitlabrunner"&gt;Original GitLab Runner&lt;/h3&gt;

&lt;p&gt;Follow &lt;a href="https://docs.gitlab.com/runner/install/linux-repository.html"&gt;this document&lt;/a&gt; to install&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash
$ sudo apt-get install gitlab-ci-multi-runner
$ gitlab-runner 
NAME:
   gitlab-runner - a GitLab Runner

USAGE:
   gitlab-runner [global options] command [command options] [arguments...]

VERSION:
   9.3.0 (3df822b)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to execute docker commands in the job script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOCKER_AUTH_CONFIG&lt;/code&gt; should be set with the content of &lt;code&gt;~/.docker/config.json&lt;/code&gt;, if the job requires registry privileged.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image: docker:latest&lt;/code&gt; should be specified in &lt;code&gt;.gitlab-ci.yml&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;/var/run/docker.sock&lt;/code&gt; should be mounted by the &lt;code&gt;gitlab-runner exec docker&lt;/code&gt; option &lt;code&gt;--docker-volumes&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the other environment variables which will be used in job configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gitlab-runner exec docker \
    --env DOCKER_AUTH_CONFIG='{"auths":{"registry.private":{"auth":"xxx"}}}' \
    --env CI_PROJECT_PATH_SLUG='project/path' \
    --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
    staging
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;from now on, you can run the GitLab runner locally to test your project in each stages and jobs.&lt;/p&gt;</content:encoded></item><item><title>How to Setup My Ghost Pages</title><description>&lt;p&gt;By this setup, you can run a &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; service on local host, and publish the content to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="beforethissetup"&gt;Before this Setup&lt;/h3&gt;

&lt;p&gt;Follow the &lt;a href="http://ansellin.club:2368/how-to-setup-my-develop-environment/"&gt;post&lt;/a&gt; to setup required environment of GitHub client, Python virtual environment, and Docker.&lt;/p&gt;

&lt;h3 id="howtosetupghost"&gt;How to Setup Ghost&lt;/h3&gt;

&lt;p&gt;From this &lt;a href="https://hub.docker.com/_/ghost/"&gt;docker image&lt;/a&gt;, it's very easy to run&lt;/p&gt;</description><link>http://ghost.ansellin.club/how-to-setup-my-ghost/</link><guid isPermaLink="false">887297c0-0c08-4ef9-a3d3-ccec858dcdff</guid><category>develop</category><dc:creator>Ansel Lin</dc:creator><pubDate>Mon, 03 Jul 2017 20:47:54 GMT</pubDate><content:encoded>&lt;p&gt;By this setup, you can run a &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; service on local host, and publish the content to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="beforethissetup"&gt;Before this Setup&lt;/h3&gt;

&lt;p&gt;Follow the &lt;a href="http://ansellin.club:2368/how-to-setup-my-develop-environment/"&gt;post&lt;/a&gt; to setup required environment of GitHub client, Python virtual environment, and Docker.&lt;/p&gt;

&lt;h3 id="howtosetupghost"&gt;How to Setup Ghost&lt;/h3&gt;

&lt;p&gt;From this &lt;a href="https://hub.docker.com/_/ghost/"&gt;docker image&lt;/a&gt;, it's very easy to run a Ghost service by the following command. And be sure to create a directory &lt;code&gt;$GHOST_DATA_DIR&lt;/code&gt; whatever you prefer to keep data of the Ghost.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p $GHOST_DATA_DIR
$ docker run \
      --name my-ghost \
      -p 2368:2368 \
      -d \
      -v $GHOST_DATA_DIR:/var/lib/ghost \
      ghost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, go to &lt;code&gt;http://localhost:2368/ghost/&lt;/code&gt; to manage the Ghost blog.&lt;/p&gt;

&lt;p&gt;In addition, if your host can be accessed from a domain name or a public IP, by setting the &lt;code&gt;config.development.config&lt;/code&gt; in the &lt;code&gt;$GHOST_DATA_DIR/config.js&lt;/code&gt;, you can configure your blog to expose to &lt;code&gt;http://&amp;lt;ghost_host&amp;gt;:2368&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker restart my-ghost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to apply the changed configuration.&lt;/p&gt;

&lt;h3 id="howtopublishtogithubpages"&gt;How to Publish to GitHub Pages&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Follow this &lt;a href="https://pages.github.com/"&gt;tutorial&lt;/a&gt; to create a &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, use the &lt;a href="https://github.com/axitkhurana/buster"&gt;Buster tools&lt;/a&gt; to setup, generate, and deploy the Ghost contents to the Github Pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# buster incompatible to python3
$ pyenv activate myenv-2.7.8
# install from my fork of buster
$ pip install git+https://github.com/weasellin/buster.git
$ cd $GHOST_DATA_DIR
$ buster setup --gh-repo=git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git
$ buster generate --domain '&amp;lt;ghost_host&amp;gt;:2368' --target-domain '&amp;lt;username&amp;gt;.github.io'
$ buster deploy
Good job! Deployed to Github Pages.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After deployment, the Pages in &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io&lt;/code&gt; should be updated.&lt;/p&gt;

&lt;p&gt;Notice that, &lt;a href="https://github.com/weasellin/buster"&gt;here&lt;/a&gt; is my fork of the buster to fix links with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;replacing &lt;code&gt;&amp;lt;ghost_host&amp;gt;:2368&lt;/code&gt; with &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;using scheme relative URLs (removing &lt;code&gt;http:&lt;/code&gt;, &lt;code&gt;https:&lt;/code&gt; in the front of the &lt;code&gt;//&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="updatepublishfromghost"&gt;Update Publish From Ghost&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv activate myenv-2.7.8
$ cd $GHOST_DATA_DIR
$ buster generate --domain '&amp;lt;ghost_host&amp;gt;:2368' --target-domain '&amp;lt;username&amp;gt;.github.io'
$ buster deploy
Good job! Deployed to Github Pages.
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>How to Setup My Develop Environment</title><description>&lt;p&gt;The following settings are based on Ubuntu 14.04 LTS.&lt;/p&gt;

&lt;h3 id="howtosetupgithubclient"&gt;How to Setup GitHub Client&lt;/h3&gt;

&lt;p&gt;Follow this &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;official document&lt;/a&gt; to setup GitHub auth key.&lt;/p&gt;

&lt;h3 id="howtosetupmyrcfiles"&gt;How to Setup My rc Files&lt;/h3&gt;

&lt;p&gt;Follow my &lt;a href="https://github.com/weasellin/dotfile"&gt;dotfile&lt;/a&gt;'s document to setup my &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.inputrc&lt;/code&gt;, and &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where the term, "rc", originated from could found&lt;/p&gt;</description><link>http://ghost.ansellin.club/how-to-setup-my-develop-environment/</link><guid isPermaLink="false">a4dc02c3-d9da-4f3b-8354-2a7e7aa5b6fa</guid><category>develop</category><dc:creator>Ansel Lin</dc:creator><pubDate>Sat, 01 Jul 2017 09:01:29 GMT</pubDate><content:encoded>&lt;p&gt;The following settings are based on Ubuntu 14.04 LTS.&lt;/p&gt;

&lt;h3 id="howtosetupgithubclient"&gt;How to Setup GitHub Client&lt;/h3&gt;

&lt;p&gt;Follow this &lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;official document&lt;/a&gt; to setup GitHub auth key.&lt;/p&gt;

&lt;h3 id="howtosetupmyrcfiles"&gt;How to Setup My rc Files&lt;/h3&gt;

&lt;p&gt;Follow my &lt;a href="https://github.com/weasellin/dotfile"&gt;dotfile&lt;/a&gt;'s document to setup my &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.inputrc&lt;/code&gt;, and &lt;code&gt;.vimrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Where the term, "rc", originated from could found in &lt;a href="https://stackoverflow.com/questions/11030552/what-does-rc-mean-in-dot-files"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="howtosetuppythonpyenv"&gt;How to Setup Python pyenv&lt;/h3&gt;

&lt;p&gt;Follow this &lt;a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems#requirements"&gt;document&lt;/a&gt; to install required libraries:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then by this &lt;a href="https://github.com/pyenv/pyenv-installer#github-way-recommended"&gt;document&lt;/a&gt; to install pyenv:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash

...

# Load pyenv automatically by adding
# the following to ~/.bash_profile:

export PATH="/home/weasellin/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install some python versions to pyenv:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install --list
   ...
$ pyenv install 2.7.8
$ pyenv install 3.6.0
$ pyenv install pypy3-2.4.0
$ pyenv versions
* system (set by /home/weasellin/.pyenv/version)
  2.7.8
  3.6.0
  pypy3-2.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create virtual env from installed versions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv virtualenv 2.7.8 myenv-2.7.8
$ pyenv virtualenv 3.6.0 myenv-3.6.0
$ pyenv virtualenv pypy3-2.4.0 myenv-pypy3-2.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Activate &amp;amp; deactivate virtual env:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv activate myenv-3.6.0
$ pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="howtosetupdocker"&gt;How to Setup Docker&lt;/h3&gt;

&lt;p&gt;Follow this &lt;a href="https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-using-the-repository"&gt;official document&lt;/a&gt; to install Docker CE. &lt;br&gt;
Then be sure to follow the &lt;a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user"&gt;post-install steps&lt;/a&gt; to allow non-super-user to use docker.&lt;/p&gt;</content:encoded></item><item><title>Welcome to Ghost</title><description>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list&lt;/p&gt;</description><link>http://ghost.ansellin.club/welcome-to-ghost/</link><guid isPermaLink="false">61a5c5e0-5774-4d58-9578-d2b2d2dbfcf5</guid><category>Getting Started</category><dc:creator>Ansel Lin</dc:creator><pubDate>Sat, 01 Jul 2017 07:49:54 GMT</pubDate><content:encoded>&lt;p&gt;You're live! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. You can manage your content by signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you arrive, you can select this post from a list on the left and see a preview of it on the right. Click the little pencil icon at the top of the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h2 id="gettingstarted"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it's a shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use &lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Item number one&lt;/li&gt;
&lt;li&gt;Item number two
&lt;ul&gt;&lt;li&gt;A nested item&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Remember to buy some milk  &lt;/li&gt;
&lt;li&gt;Drink the milk  &lt;/li&gt;
&lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like &lt;a href="http://ghost.org"&gt;http://ghost.org&lt;/a&gt; - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to &lt;a href="http://ghost.org"&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id="whataboutimages"&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://ghost.org/images/ghost.png" alt="The Ghost Logo"&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:&lt;/p&gt;

&lt;h3 id="quoting"&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn't enough, you want to quote someone on what they've said. Perhaps you've started using a new blogging platform and feel the sudden urge to share their slogan? A quote might be just the way to do it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ghost - Just a blogging platform&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="workingwithcode"&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We've got you covered there, too. You can write inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="readyforabreak"&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="advancedusage"&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There's one fantastic secret about Markdown. If you want, you can write plain old HTML and it'll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type="text" placeholder="I'm an input field!"&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know what you think :)&lt;/p&gt;</content:encoded></item></channel></rss>